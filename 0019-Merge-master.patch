From 2f95047d0fdcde4d8149fc2380ee466788d9a7c2 Mon Sep 17 00:00:00 2001
From: "Daniel T. Borelli" <daltomi@openmailbox.org>
Date: Tue, 20 Jun 2017 16:52:17 -0300
Subject: [PATCH 19/19] Merge master

---
 trunk/configure.in |  6 ----
 trunk/main.c       | 90 +++++++++++++++++++++++++++---------------------------
 trunk/mocp.1       |  1 -
 3 files changed, 45 insertions(+), 52 deletions(-)

diff --git a/trunk/configure.in b/trunk/configure.in
index ca0ad58..498d406 100644
--- a/trunk/configure.in
+++ b/trunk/configure.in
@@ -44,12 +44,6 @@ AC_SUBST([plugindir])
 PLUGIN_LDFLAGS='-module -avoid-version'
 AC_SUBST([PLUGIN_LDFLAGS])
 
-case "$host_vendor" in
-	openwrt)
-		AC_DEFINE([OPENWRT], 1, [Define if your distribution is OpenWRT])
-		;;
-esac
-
 case "$host_os" in
 	linux*)
 		AC_DEFINE([LINUX], 1, [Define if your system is GNU/Linux])
diff --git a/trunk/main.c b/trunk/main.c
index 613b074..3a6c9e7 100644
--- a/trunk/main.c
+++ b/trunk/main.c
@@ -45,11 +45,8 @@
 
 static int mocp_argc;
 static const char **mocp_argv;
-
-#ifndef OPENWRT
 static int popt_next_val = 1;
 static char *render_popt_command_line ();
-#endif
 
 /* List of MOC-specific environment variables. */
 static struct {
@@ -412,7 +409,6 @@ static void show_help (poptContext ctx)
 }
 
 /* Show POPT-interpreted command line arguments. */
-#ifndef OPENWRT
 static void show_args ()
 {
 	if (mocp_argc > 0) {
@@ -431,7 +427,6 @@ static void show_args ()
 		free (str);
 	}
 }
-#endif
 
 /* Disambiguate the user's request. */
 static void show_misc_cb (poptContext ctx,
@@ -448,13 +443,11 @@ static void show_misc_cb (poptContext ctx,
 		show_help (ctx);
 		break;
 	case 0:
-#ifndef OPENWRT
 		if (!strcmp (opt->longName, "echo-args"))
 			show_args ();
 		else
-#endif
-		if (!strcmp (opt->longName, "usage"))
-			show_usage (ctx);
+			if (!strcmp (opt->longName, "usage"))
+				show_usage (ctx);
 		break;
 	}
 
@@ -564,10 +557,8 @@ static struct poptOption misc_opts[] = {
 	       (void *) (uintptr_t) show_misc_cb, 0, NULL, NULL},
 	{"version", 'V', POPT_ARG_NONE, NULL, 0,
 			"Print version information", NULL},
-#ifndef OPENWRT
 	{"echo-args", 0, POPT_ARG_NONE, NULL, 0,
 			"Print POPT-interpreted arguments", NULL},
-#endif
 	{"usage", 0, POPT_ARG_NONE, NULL, 0,
 			"Print brief usage", NULL},
 	{"help", 'h', POPT_ARG_NONE, NULL, 0,
@@ -684,38 +675,62 @@ static void prepend_mocp_opts (poptContext ctx)
 	}
 }
 
+static const struct poptOption specials[] = {POPT_AUTOHELP
+                                             POPT_AUTOALIAS
+                                             POPT_TABLEEND};
+
+/* Return true iff 'opt' is a POPT AutoHelp option. */
+static inline bool is_autohelp (const struct poptOption *opt)
+{
+	const struct poptOption *autohelp = &specials[0];
+
+	return opt->argInfo == autohelp->argInfo && opt->arg == autohelp->arg;
+}
+
+/* Return true iff 'opt' is a POPT AutoAlias option. */
+static inline bool is_autoalias (const struct poptOption *opt)
+{
+	const struct poptOption *autoalias = &specials[1];
+
+	return opt->argInfo == autoalias->argInfo && opt->arg == autoalias->arg;
+}
+
+/* Return true iff 'opt' is the POPT end-of-table marker. */
+static inline bool is_tableend (const struct poptOption *opt)
+{
+	const struct poptOption *tableend = &specials[2];
+
+	return opt->longName == tableend->longName &&
+	       opt->shortName == tableend->shortName &&
+	       opt->arg == tableend->arg;
+}
+
 /* Return a copy of the POPT option table structure which is suitable
  * for rendering the POPT expansions of the command line. */
-#ifndef OPENWRT
 struct poptOption *clone_popt_options (struct poptOption *opts)
 {
-	size_t count, ix, iy = 0;
+	size_t tally, ix, iy = 0;
 	struct poptOption *result;
-	const struct poptOption specials[] = {POPT_AUTOHELP
-	                                      POPT_AUTOALIAS
-	                                      POPT_TABLEEND};
 
 	assert (opts);
 
-	for (count = 1;
-	     memcmp (&opts[count - 1], &specials[2], sizeof (struct poptOption));
-	     count += 1);
+	for (tally = 1; !is_tableend (&opts[tally - 1]); tally += 1);
 
-	result = xcalloc (count, sizeof (struct poptOption));
+	result = xcalloc (tally, sizeof (struct poptOption));
 
-	for (ix = 0; ix < count; ix += 1) {
+	for (ix = 0; ix < tally; ix += 1) {
 		if (opts[ix].argInfo == POPT_ARG_CALLBACK)
 			continue;
 
-		if (!memcmp (&opts[ix], &specials[0], sizeof (struct poptOption)))
+		if (is_autohelp (&opts[ix]))
 			continue;
 
-		if (!memcmp (&opts[ix], &specials[1], sizeof (struct poptOption)))
+		if (is_autoalias (&opts[ix]))
 			continue;
 
 		memcpy (&result[iy], &opts[ix], sizeof (struct poptOption));
 
-		if (!memcmp (&opts[ix], &specials[2], sizeof (struct poptOption)))
+		if (is_tableend (&opts[ix]))
 			continue;
 
 		if (opts[ix].argInfo == POPT_ARG_INCLUDE_TABLE) {
@@ -747,33 +762,27 @@ struct poptOption *clone_popt_options (struct poptOption *opts)
 
 	return result;
 }
-#endif
 
 /* Free a copied POPT option table structure. */
-#ifndef OPENWRT
 void free_popt_clone (struct poptOption *opts)
 {
 	int ix;
-	const struct poptOption table_end = POPT_TABLEEND;
 
 	assert (opts);
 
-	for (ix = 0; memcmp (&opts[ix], &table_end, sizeof (table_end)); ix += 1) {
+	for (ix = 0; !is_tableend (&opts[ix]); ix += 1) {
 		if (opts[ix].argInfo == POPT_ARG_INCLUDE_TABLE)
 			free_popt_clone (opts[ix].arg);
 	}
 
 	free (opts);
 }
-#endif
 
 /* Return a pointer to the copied POPT option table entry for which the
  * 'val' field matches 'wanted'.  */
-#ifndef OPENWRT
 struct poptOption *find_popt_option (struct poptOption *opts, int wanted)
 {
 	int ix = 0;
-	const struct poptOption table_end = POPT_TABLEEND;
 
 	assert (opts);
 	assert (LIMIT(wanted, popt_next_val));
@@ -781,7 +790,7 @@ struct poptOption *find_popt_option (struct poptOption *opts, int wanted)
 	while (1) {
 		struct poptOption *result;
 
-		if (!memcmp (&opts[ix], &table_end, sizeof (table_end)))
+		if (is_tableend (&opts[ix]))
 			break;
 
 		assert (opts[ix].argInfo != POPT_ARG_CALLBACK);
@@ -811,10 +820,8 @@ struct poptOption *find_popt_option (struct poptOption *opts, int wanted)
 
 	return NULL;
 }
-#endif
 
 /* Render the command line as interpreted by POPT. */
-#ifndef OPENWRT
 static char *render_popt_command_line ()
 {
 	int rc;
@@ -887,7 +894,6 @@ err:
 
 	return result;
 }
-#endif
 
 static void override_config_option (const char *arg, lists_t_strs *deferred)
 {
@@ -1031,23 +1037,17 @@ static void process_options (poptContext ctx, lists_t_strs *deferred)
 	}
 
 	if (rc < -1) {
-		const char *opt, *alias, *reason;
+		const char *opt, *alias;
 
 		opt = poptBadOption (ctx, 0);
 		alias = poptBadOption (ctx, POPT_BADOPTION_NOALIAS);
-		reason = poptStrerror (rc);
-
-#ifdef OPENWRT
-		if (!strcmp (opt, "--echo-args"))
-			reason = "Not available on OpenWRT";
-#endif
 
 		/* poptBadOption() with POPT_BADOPTION_NOALIAS fails to
 		 * return the correct option if poptStuffArgs() was used. */
 		if (!strcmp (opt, alias) || getenv ("MOCP_OPTS"))
-			fatal ("%s: %s", opt, reason);
+			fatal ("%s: %s", opt, poptStrerror (rc));
 		else
-			fatal ("%s (aliased by %s): %s", opt, alias, reason);
+			fatal ("%s (aliased by %s): %s", opt, alias, poptStrerror (rc));
 	}
 
 	if (params.config_file && params.no_config_file)
@@ -1154,7 +1154,7 @@ static void log_command_line ()
 /* Log the command line as interpreted by POPT. */
 static void log_popt_command_line ()
 {
-#if !defined(NDEBUG) && !defined(OPENWRT)
+#ifndef NDEBUG
 	if (mocp_argc > 0) {
 		char *str;
 
diff --git a/trunk/mocp.1 b/trunk/mocp.1
index 7146ad1..8c6d5a5 100644
--- a/trunk/mocp.1
+++ b/trunk/mocp.1
@@ -234,7 +234,6 @@ Print the program version and exit.
 .TP
 \fB\-\-echo-args\fP
 Print the POPT-interpreted command line arguments and exit.
-(Note that this option is not available on OpenWRT.)
 .LP
 .TP
 \fB\-v\fP [\fB+\fP|\fB\-\fP]\fIN\fP, \
-- 
2.13.1

